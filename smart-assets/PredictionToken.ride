# This token is a lottery ticket which wins if, on Feb 18th, the
# WAVES/WUSD price at the DEX reaches $3 for 1 WAVES.
#
# The ticket issuer files two orders:
# - A sell order at say 1 WAVES so that people can buy tickets
# - A buy order at say 2 WAVES. The matching sell order should have
#   as its proof #1 the ID of an Exchange transaction which:
#   - is signed by the DEX matcher
#   - occurred on Feb 18th
#   - traded WAVES for WUSD
#   - has price above $3 / WAVES
#
# So people get their tickets by buying them from the issuer for
# 1 WAVES. They can sell or transfer them freely to other folks
# for any price they like. However, when they try to sell back to the
# issuer, the conditions above are checked.
#
#
# Notes:
# =====
# - Tickets can check any condition, not necessarily DEX prices --
#   e.g. some oracle. This example script just uses DEX as an oracle.
# - It is important to check that the proof transaction indeed comes
#   from DEX. Otherwise it's possible to craft a self-signed exchange
#   transaction with the desired price and use it as proof.
# - Such proofs of price only make sense for liquid markets that are
#   expensive to manipulate.
# - Currently our DEX does not allow filing buyback orders. They get
#   rejected by its asset script checking routine.
#
#
# Enough chatting, let's check out the code:
# ------------------------------------------------------------------
#
let Issuer = addressFromString("3PED7PH1MGsa9Q2EL46q89qLvS4z9jmSnjD")

                            # The story goes here:
                            #
let DexPublicKey =          # IF, at our DEX,
    base58'7kPFrHDiGw1rCm7LPszuECwWYL3dMf6iMifLRDJQZMzy'
let Start = 1550437200000   # between Feb 18 00:00 MSK
let End   = 1550523600000   # and Feb 18 24:00 MSK,
let Pair =                  # price of WAVES against WUSD
    AssetPair(unit, base58'Ft8X1v1LTa1ABafufpaCWyVj8KkaxUWE6xBhW6sNFJck')
let TargetPrice = 300       # reaches 3 WUSD for 1 WAVES
let WinAmount = 200000000   # THEN this token can be sold for 2 WAVES

match tx {
    case tx: ExchangeTransaction =>
        let proofId = tx.sellOrder.proofs[1]
        let proof = transactionById(proofId)
        let proven = match proof {
            case ex: ExchangeTransaction =>
                ex.senderPublicKey == DexPublicKey &&
                ex.buyOrder.assetPair == Pair &&
                ex.timestamp >= Start &&
                ex.timestamp <= End &&
                ex.price >= TargetPrice
            case _ => false
        }
        let checked =
            tx.timestamp >= Start &&
            tx.price == WinAmount
        tx.buyOrder.sender != Issuer || checked && proven
    case _ => true
}
